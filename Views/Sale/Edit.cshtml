@model Inventorymanagement.ViewModels.SaleViewModel

@{
    ViewBag.Title = "Edit Sale";
    Layout = "_Layout";

    // Convert IEnumerable to List to allow indexing
    var saleLineItemsList = Model.SaleLineItems?.ToList() ?? new List<Inventorymanagement.ViewModels.SaleLineItemViewModel>();
}

<h2>Edit Sale</h2>

<form asp-action="Edit" method="post">
    <input type="hidden" name="Id" value="@Model.Id" />

    <div class="mb-3">
        <dt>Sale Date</dt>
        <dd>@Model.SaleDate.ToString("yyyy-MM-dd HH:mm")</dd>
    </div>

    <div class="mb-3">
        <dt>Created By</dt>
        <dd>@Model.CreatedByUserName</dd>
    </div>

    <hr />
    <h4>Sale Line Items</h4>

    @for (int i = 0; i < saleLineItemsList.Count; i++)
    {
        <div class="border rounded p-3 mb-3">
            <input type="hidden" name="SaleLineItems[@i].Id" value="@saleLineItemsList[i].Id" />
            <input type="hidden" name="SaleLineItems[@i].SaleId" value="@saleLineItemsList[i].SaleId" />

            <div class="mb-2">
                <label class="form-label" for="SaleLineItems_ProductId_@i">Product</label>
                <select class="form-select" name="SaleLineItems[@i].ProductId" id="SaleLineItems_ProductId_@i">
                    @foreach (var product in saleLineItemsList[i].Products)
                    {
                        <option value="@product.Value">
                            @product.Text
                        </option>
                    }
                </select>
            </div>

            <div class="mb-2">
                <label class="form-label" for="SaleLineItems_Quantity_@i">Quantity</label>
                <input class="form-control" type="number" name="SaleLineItems[@i].Quantity" id="SaleLineItems_Quantity_@i" value="@saleLineItemsList[i].Quantity" />
            </div>

            <div class="mb-2">
                <label class="form-label" for="SaleLineItems_UnitPrice_@i">Unit Price</label>
                <input class="form-control" type="number" step="0.01" name="SaleLineItems[@i].UnitPrice" id="SaleLineItems_UnitPrice_@i" value="@saleLineItemsList[i].UnitPrice" />
            </div>

            <div class="mb-2">
                <dt>Total Price</dt>
                <dd class="total-price" data-index="@i">@saleLineItemsList[i].TotalPrice.ToString("F2")</dd>
            </div>
        </div>
    }
    
    <div class="mb-3">
        <dt>Total amount</dt>
        <dd id="total-amount">@Model.TotalAmount.ToString("F2")</dd>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const itemCount = @saleLineItemsList.Count;

            for (let i = 0; i < itemCount; i++) {
                const quantityInput = document.querySelector(`[name="SaleLineItems[${i}].Quantity"]`);
                const unitPriceInput = document.querySelector(`[name="SaleLineItems[${i}].UnitPrice"]`);

                if (quantityInput && unitPriceInput) {
                    quantityInput.addEventListener('input', () => updateTotal(i));
                    unitPriceInput.addEventListener('input', () => updateTotal(i));
                }
            }

            function updateTotal(index) {
                const quantity = parseFloat(document.querySelector(`[name="SaleLineItems[${index}].Quantity"]`)?.value) || 0;
                const unitPrice = parseFloat(document.querySelector(`[name="SaleLineItems[${index}].UnitPrice"]`)?.value) || 0;
                const totalElement = document.querySelector(`.total-price[data-index="${index}"]`);

                const lineTotal = (quantity * unitPrice).toFixed(2);

                if (totalElement) {
                    totalElement.textContent = lineTotal;
                }

                updateTotalAmount();
            }

            function updateTotalAmount() {
                let grandTotal = 0;

                for (let i = 0; i < itemCount; i++) {
                    const quantity = parseFloat(document.querySelector(`[name="SaleLineItems[${i}].Quantity"]`)?.value) || 0;
                    const unitPrice = parseFloat(document.querySelector(`[name="SaleLineItems[${i}].UnitPrice"]`)?.value) || 0;
                    grandTotal += quantity * unitPrice;
                }

                const totalAmountElement = document.getElementById("total-amount");
                if (totalAmountElement) {
                    totalAmountElement.textContent = grandTotal.toFixed(2);
                }
            }
        });
        
        
    </script>
}

